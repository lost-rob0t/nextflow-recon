/*
 * Nextflow configuration file for hackmode security reconnaissance framework
 */

// Enable DSL 2
nextflow.enable.dsl = 2

// Include base configuration
includeConfig 'conf/base.config'

// Default parameters
params {
    // Input/Output
    input = null

    // BBRF Configuration
    bbrf_program = System.getenv('HACKMODE_OP') ?: 'default-op'
    use_bbrf_targets = true
    upload_to_bbrf = true
    bbrf_tags = 'subfinder,assetfinder,httpx'
    bbrf_get_full_urls = true  // Set to false to get only URLs without status codes
    
    // Upload Configuration
    upload_batch_size = 1000
    upload_retry_count = 3
    
    // Fuzzing Configuration (for fuzz.nf)
    wordlist = "${System.getProperty('user.home')}/wordlists/common.txt"
    extensions = "php,html,txt,js,json,xml,asp,aspx,jsp"
    use_gobuster = true
    use_ffuf = true
    use_dirbuster = false
    
    // Environment
    hackmode_operation = System.getenv('HACKMODE_OP') ?: 'default-op'
    hackmode_path = System.getenv('HACKMODE_PATH') ?: ''
    outdir = "${hackmode_path}/results"
    // Tool Configuration
    passive_recon = true
    active_recon = false
    port_scan = false
    vulnerability_scan = false
    web_crawl = false
    publish_intermediates = false
    
    // Subfinder
    subfinder_sources = 'all'
    
    // Assetfinder
    enable_assetfinder = true
    
    // HTTPx
    httpx_json_output = true
    httpx_tech_detect = true
    httpx_hash_calculate = true
    httpx_jarm = false
    httpx_threads = 50
    
    // Katana
    katana_json_output = true
    katana_depth = 3
    katana_concurrency = 10
    katana_js_crawl = true
    katana_tech_detect = true
    katana_form_extraction = true
    katana_xhr_extraction = true
    katana_timeout = 10
    katana_delay = 0
    katana_rate_limit = 150
    katana_known_files = 'robotstxt,sitemapxml'
    katana_user_agent = null
    katana_proxy = null
    katana_filter_extensions = 'png,jpg,jpeg,gif,svg,ico,css,woff,woff2,ttf,eot'
    katana_match_extensions = null
    katana_crawl_scope = null
    katana_field = 'url'
    katana_batch_size = 0  // Set to > 0 to enable batch processing
    
    // Rate limiting
    rate_limit = 100
    delay = '100ms'
    
    // Reporting
    generate_report = true
    slack_webhook = null
    discord_webhook = null
    
    // File paths
    targets_file = "${params.hackmode_path}/.config/targets.txt"
    wordlists_dir = "${System.getProperty('user.home')}/wordlists"
    scans_dir = "${params.hackmode_path}/scans"
    findings_dir = "${params.hackmode_path}/findings"
    
    // Help and validation
    help = false
    validate_params = false
}

// Process configuration
process {
    // Default process settings
    errorStrategy = 'retry'
    maxRetries = 3
    
    // Resource requirements
    cpus = 1
    memory = '4 GB'
    time = '1h'
    
    // Specific process configurations
    withName: 'BBRF_.*' {
        errorStrategy = 'retry'
        maxRetries = 5
        time = '10m'
    }
    
    withName: 'SUBFINDER' {
        cpus = 2
        memory = '2 GB'
        time = '30m'
    }
    
    withName: 'ASSETFINDER' {
        cpus = 1
        memory = '1 GB'
        time = '15m'
    }
    
    withName: 'HTTPX.*' {
        cpus = 4
        memory = '4 GB'
        time = '1h'
        
        // Container scaling configurations
        $docker {
            cpus = 2
            memory = '2 GB'
            maxForks = 50
        }
        
        $kubernetes {
            cpus = 2
            memory = '3 GB'
            maxForks = 200
        }
        
        $aws_batch {
            cpus = 4
            memory = '4 GB'
            queue = 'httpx-queue'
        }
    }
    
    withName: 'KATANA.*' {
        cpus = 2
        memory = '8 GB'
        time = '2h'
        errorStrategy = 'retry'
        maxRetries = 2
        

    }
    
}

// Execution profiles
profiles {
    standard {
        process.executor = 'local'
    }
    

    kubernetes {
        process.executor = 'k8s'
        k8s {
            namespace = 'hackmode-recon'
            serviceAccount = 'hackmode-runner'
            storageClaimName = 'hackmode-storage'
            storageMountPath = '/workspace'
        }
        
        // Kubernetes scaling configuration
        executor {
            queueSize = 1000
            submitRateLimit = '200/1min'
        }
        
        process {
            container = 'hackmode/recon:latest'
            pod = [
                [securityContext: [fsGroup: 1000]],
                [nodeSelector: ['workload': 'security-recon']],
                [tolerations: [[key: 'dedicated', operator: 'Equal', value: 'security-recon', effect: 'NoSchedule']]]
            ]
        }
    }
    
    aws_batch {
        process.executor = 'awsbatch'
        process.queue = 'hackmode-recon-queue'
        process.container = 'your-account.dkr.ecr.region.amazonaws.com/hackmode/recon:latest'
        
        aws {
            region = 'us-east-1'
            batch {
                volumes = '/tmp'
                cliPath = '/home/ec2-user/miniconda/bin/aws'
            }
        }
        
        // AWS Batch scaling
        executor {
            queueSize = 2000
            submitRateLimit = '500/1min'
        }
    }
    
    gcp_batch {
        process.executor = 'google-batch'
        process.container = 'gcr.io/your-project/hackmode-recon:latest'
        
        google {
            project = 'your-project-id'
            zone = 'us-central1-a'
            batch {
                spot = true
                bootDiskSize = '50GB'
            }
        }
        
        // GCP Batch scaling
        executor {
            queueSize = 2000
            submitRateLimit = '500/1min'
        }
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        process.container = 'hackmode/recon:latest'
        
        // Singularity scaling configuration
        executor {
            queueSize = 200
            submitRateLimit = '100/1min'
        }
    }
    
    cluster {
        process.executor = 'slurm'
        process.queue = 'compute'
        process.clusterOptions = '--partition=compute'
        
        // SLURM scaling configuration
        executor {
            queueSize = 1000
            submitRateLimit = '200/1min'
        }
    }
    
    cluster_pbs {
        process.executor = 'pbs'
        process.queue = 'workq'
        
        executor {
            queueSize = 500
            submitRateLimit = '100/1min'
        }
    }
    
    test {
        params.bbrf_program = 'test-program'
        params.hackmode_path = '/tmp/hackmode-test'
        process.executor = 'local'
        process.errorStrategy = 'ignore'
        executor.queueSize = 10
    }
    
    scale_out {
        // High-performance scaling profile
        process.executor = 'local'
        executor {
            queueSize = 1000
            submitRateLimit = '500/1min'
            pollInterval = '5s'
        }
        
        // Aggressive resource allocation
        process {
            withName: 'HTTPX.*' {
                cpus = 2
                memory = '2 GB'
                maxForks = 50
            }
            
            withName: 'KATANA.*' {
                cpus = 1
                memory = '4 GB'
                maxForks = 25
            }
            
            withName: 'SUBFINDER.*|ASSETFINDER.*' {
                maxForks = 20
            }
        }
    }
}

// Reporting
report {
    enabled = true
    file = "${params.outdir}/execution_report.html"
}

timeline {
    enabled = true
    file = "${params.outdir}/execution_timeline.html"
}

trace {
    enabled = true
    file = "${params.outdir}/execution_trace.txt"
}

dag {
    enabled = true
    file = "${params.outdir}/pipeline_dag.svg"
}

// Cleanup
cleanup = false

// Manifest
manifest {
    name = 'hackmode-recon'
    author = 'Security Research Team'
    homePage = 'https://github.com/your-org/hackmode-recon'
    description = 'Security reconnaissance automation framework'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.04.0'
    version = '1.0.0'
}
trace.overwrite = true
report.overwrite = true
timeline.overwrite = true
dag.overwrite = true
